select  * from ecomerce.sellers;

#1. List all unique cities where customers are located.
select distinct customer_city from ecomerce.customers;

#Count the number of orders placed in 2017.
select  count(order_id) from ecomerce.orders
where year(order_purchase_timestamp)='2017';

#3. Find the total sales per category.
select p.product_category,sum(pa.payment_value) as total from ecomerce.products as p
join ecomerce.order_items as o
on p.product_id=o.product_id
join ecomerce.payments as pa
on o.order_item_id=pa.order_id
group by p.product_category;


#4. Calculate the percentage of orders that were paid in installments >1.
set @lent =(select count(*) from ecomerce.payments);
select @lent;

set @count_ints_great_1=(select count(*) from ecomerce.payments
where payment_installments>1);
select @count_ints_great_1;

set @percentage=((select @count_ints_great_1)/(select @lent))*100;

select @percentage;


#5. Count the number of customers from each state.

select customer_state,count(customer_id)as no_of_customer from ecomerce.customers
group by customer_state;


#Intermediate Queries
#1. Calculate the number of orders per month in 2018.
select monthname(order_purchase_timestamp)as Monthh,count(order_id) as Total_order_in_month from 
(select * from ecomerce.orders
where year(order_purchase_timestamp)='2018')t
group by monthname(order_purchase_timestamp)
order by Monthh asc;

#select * from ecomerce.orders
#where year(order_purchase_timestamp)='2018';

#2. Find the average number of products per order, grouped by customer city.
with count_per_order as 
(select orders.order_id, orders.customer_id, count(order_items.order_id) as oc
from ecomerce.orders join ecomerce.order_items
on orders.order_id = order_items.order_id
group by orders.order_id, orders.customer_id)

select customers.customer_city, round(avg(count_per_order.oc),2) average_orders
from ecomerce.customers join  count_per_order
on customers.customer_id = count_per_order.customer_id
group by customers.customer_city order by average_orders desc;

#3. Calculate the percentage of total revenue contributed by each product category.
select distinct product_category,(sum(payment_value)/(select sum(payment_value) from ecomerce.payments))*100 as percentage_of_total_revenue from (
select  order_items.order_id,products.product_category from ecomerce.products
join ecomerce.order_items
on products.product_id=order_items.product_id
) as t
join ecomerce.payments
on t.order_id=payments.order_id
group by product_category
 ;

#4. Identify the correlation between product price and the number of times a product has been purchased.
select products.product_category ,count(products.product_id) as count_id,avg(order_items.price)as average_price from ecomerce.products
join ecomerce.order_items on products.product_id=order_items.product_id
group by products.product_category;

#5. Calculate the total revenue generated by each seller, and rank them by revenue.
select * ,dense_rank() over(order by Total_revenue desc) as rankk from (select sellers.seller_id,sum(payments.payment_value) as Total_revenue from ecomerce.sellers
join ecomerce.order_items
on sellers.seller_id=order_items.order_id
join ecomerce.payments
on order_items.order_id=payments.order_id
group by sellers.seller_id)t;


#1. Calculate the moving average of order values for each customer over their order history.
select customer_id, order_purchase_timestamp, payment,
avg(payment) over(partition by customer_id order by order_purchase_timestamp
rows between 2 preceding and current row) as mov_avg
from
(select orders.customer_id, orders.order_purchase_timestamp, 
payments.payment_value as payment
from ecomerce.payments join ecomerce.orders
on payments.order_id = orders.order_id) as t;

#2. Calculate the cumulative sales per month for each year.
select *,round(sum(payment) over(order by years,months asc),2) as cumulative_sales_table from(
select year(orders.order_purchase_timestamp)as years,
month(orders.order_purchase_timestamp) as months,round(sum(payments.payment_value),2) as payment
from ecomerce.orders join ecomerce.payments on orders.order_id=payments.order_id
group by years,months)as s;

#3. Calculate the year-over-year growth rate of total sales.
#USING CTE
select *,((sales-previous_sales)/previous_sales)*100 as growth from (
with a as  (
select year(orders.order_purchase_timestamp)as years,
 round(sum(payments.payment_value),2) as sales
from ecomerce.orders join ecomerce.payments on orders.order_id=payments.order_id
group by years order by years)

select years,sales,lag(sales,1) over(order by years) as previous_sales from a)t;




